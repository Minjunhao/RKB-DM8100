/*****************************************************************************
******************************************************************************
**                                                                          **
**  Copyright (c) 2005 Videon Central, Inc.                                 **
**  All rights reserved.                                                    **
**                                                                          **
**  The computer program contained herein contains proprietary information  **
**  which is the property of Videon Central, Inc.  The program may be used  **
**  and/or copied only with the written permission of Videon Central, Inc.  **
**  or in accordance with the terms and conditions stipulated in the        **
**  agreement/contract under which the programs have been supplied.         **
**                                                                          **
******************************************************************************
*****************************************************************************/
/**
 * @file
 *    chardef.h
 *
 * Bitmap data file for the 5x7x20 display
 *
 *
 * @author
 *    Chuck Etzweiler
 *
 * @date 2005.06.30 - Created
 * @date 2005.10.06 - Modified letters 'J', 'q', and 'v'.
*/

// write the numbers in binary bottom-to-top and right-to-left.
// Each char takes 35 bits, but store in 5 bytes( 40 bits ),
// so pad each char bit map with 5 zeroes.
//
// x-y-z
// x = char position in the array.
// y = ASCII value, in decimal for that character.
// z = byte offset in the array for that character.
// example - the number zero( 16-48-80 )
//			 is the 16th character( zero based ) in array c_0.
//           it is ASCII value 48 decimal.
//           the starting byte( zero based offset ) for the bitmap is 80.
//
// There are special characters needed for this project that don' t have
// an ASCII equivalent. These are remapped to other ASCII characters.
// example - the inverted T is stored as ASCII character
//           '!' ( exclamation point ).
/****************************************************************************
	+---+---+---+---+---+		5x7 dot matrix
	| 42| 41| 40| 37| 36|
	+---+---+---+---+---+
	| 35| 34| 33| 32| 31|
	+---+---+---+---+---+
	| 30| 27| 26| 25| 24|
	+---+---+---+---+---+
	| 23| 22| 21| 20| 17|
	+---+---+---+---+---+
	| 16| 15| 14| 13| 12|
	+---+---+---+---+---+
	| 11| 10| 7 | 6 | 5 |
	+---+---+---+---+---+
	| 4 | 3 | 2 | 1 | 0 |
	+---+---+---+---+---+

	------------------------------------
	0xFE, 0xF7, 0xBD, 0xC7, 0xE0
	------------------------------------
	0xFE = 00 01 02 03 04 05 06 07(lsb)
	0xF7 = 10 11 12 13 14 15 16 17
	0xBD = 20 21 22 23 24 25 26 27
	0xC7 = 30 31 32 33 34 35 36 37
	0xE0 = 40 41 42 xx xx xx xx xx
	------------------------------------

	@@auther : An Kyung Chan
*****************************************************************************/
/*****************************************************************************

0x20 : !"#$%&'()*+,-./
0x30 :0123456789:;<=>?
0x40 :@ABCDEFGHIJKLMNO
0x50 :PQRSTUVWXYZ[\]^_
0x60 :'abcdefghijklmno
0x70 :pqrstuvwxyz{|}~
0x80 :
0x90 :*	
	
*****************************************************************************/
#ifndef _CHARDEF_H_
#define _CHARDEF_H_
// Only 255 elements allowed in an array, had to split into two.
BYTE const charAasciiFont[126][5] = {	/* 5x7 ASCII character font */

 {0x00, 0x00, 0x00, 0x00, 0x00},  // 0x20 space                       
 {0x20, 0x08, 0x42, 0x10, 0x80},  // 0x21 !                           
 {0x00, 0x00, 0x05, 0x29, 0x40},  // 0x22 "                           
 {0x52, 0xBE, 0xAF, 0xA9, 0x40},  // 0x23 #                           
 {0x23, 0xE8, 0xE2, 0xF8, 0x80},  // 0x24 $                           
 {0xC6, 0x44, 0x44, 0x4C, 0x60},  // 0x25 %                           
 {0xB2, 0x6A, 0x22, 0xA4, 0xC0},  // 0x26 &                           
 {0x00, 0x00, 0x01, 0x10, 0xC0},  // 0x27 '                           
 {0x41, 0x04, 0x21, 0x11, 0x00},  // 0x28 (                           
 {0x11, 0x10, 0x84, 0x10, 0x40},  // 0x29 )                           
 {0x01, 0x2A, 0xEA, 0x90, 0x00},  // 0x2a *                           
 {0x01, 0x09, 0xF2, 0x10, 0x00},  // 0x2b +                           
 {0x11, 0x0C, 0x00, 0x00, 0x00},  // 0x2c ,                           
 {0x00, 0x01, 0xF0, 0x00, 0x00},  // 0x2d -                           
 {0x31, 0x80, 0x00, 0x00, 0x00},  // 0x2e .                           
 {0x00, 0x44, 0x44, 0x40, 0x00},  // 0x2f /                           
 {0x74, 0x67, 0x5C, 0xC5, 0xC0},  // 0x30 0                           
 {0x71, 0x08, 0x42, 0x18, 0x80},  // 0x31 1                           
 {0xF8, 0x88, 0x88, 0x45, 0xC0},  // 0x32 2                           
 {0x74, 0x60, 0x82, 0x23, 0xE0},  // 0x33 3                           
 {0x42, 0x3E, 0x95, 0x31, 0x00},  // 0x34 4                           
 {0x74, 0x61, 0x07, 0x87, 0xE0},  // 0x35 5                           
 {0x74, 0x62, 0xF0, 0x89, 0x80},  // 0x36 6                           
 {0x10, 0x84, 0x44, 0x43, 0xE0},  // 0x37 7                           
 {0x74, 0x62, 0xE8, 0xC5, 0xC0},  // 0x38 8                           
 {0x32, 0x21, 0xE8, 0xC5, 0xC0},  // 0x39 9                           
 {0x01, 0x8C, 0x03, 0x18, 0x00},  // 0x3a :                           
 {0x11, 0x0C, 0x03, 0x18, 0x00},  // 0x3b ;                           
 {0x41, 0x04, 0x11, 0x11, 0x00},  // 0x3c <                           
 {0x00, 0x3E, 0x0F, 0x80, 0x00},  // 0x3d =                           
 {0x11, 0x11, 0x04, 0x10, 0x40},  // 0x3e >                           
 {0x20, 0x08, 0x88, 0x45, 0xC0},  // 0x3f ?                           
 {0x75, 0x6B, 0x68, 0x45, 0xC0},  // 0x40 @                           
 {0x8C, 0x7F, 0x18, 0xC5, 0xC0},  // 0x41 A                           
 {0x7C, 0x62, 0xF8, 0xC5, 0xF0},  // 0x42 B                           
 {0x74, 0x42, 0x10, 0xC5, 0xC0},  // 0x43 C                           
 {0x3A, 0x63, 0x18, 0xA4, 0xE0},  // 0x44 D                           
 {0xF8, 0x42, 0xF0, 0x87, 0xE0},  // 0x45 E                           
 {0x08, 0x42, 0xF0, 0x87, 0xE0},  // 0x46 F                           
 {0x74, 0x63, 0x90, 0x85, 0xC0},  // 0x47 G                           
 {0x8C, 0x63, 0xF8, 0xC6, 0x20},  // 0x48 H                           
 {0x71, 0x08, 0x42, 0x11, 0xC0},  // 0x49 I                           
 {0x11, 0x4A, 0x42, 0x13, 0xE0},  // 0x4a J                           
 {0x8A, 0x4A, 0x32, 0xA6, 0x20},  // 0x4b K                           
 {0xF8, 0x42, 0x10, 0x84, 0x20},  // 0x4c L                           
 {0x8C, 0x63, 0x5A, 0xEE, 0x20},  // 0x4d M                           
 {0x8C, 0x73, 0x59, 0xC6, 0x20},  // 0x4e N                           
 {0x74, 0x63, 0x18, 0xC5, 0xC0},  // 0x4f O                           
 {0x08, 0x42, 0xF8, 0xC5, 0xE0},  // 0x50 P                           
 {0x83, 0xA3, 0x18, 0xC5, 0xC0},  // 0x51 Q                           
 {0x8A, 0x4A, 0xF8, 0xC5, 0xE0},  // 0x52 R                           
 {0x7C, 0x20, 0xE0, 0x87, 0xC0},  // 0x53 S                           
 {0x21, 0x08, 0x42, 0x13, 0xE0},  // 0x54 T                           
 {0x74, 0x63, 0x18, 0xC6, 0x20},  // 0x55 U                           
 {0x22, 0xA3, 0x18, 0xC6, 0x20},  // 0x56 V                           
 {0x55, 0x6B, 0x58, 0xC6, 0x20},  // 0x57 W                           
 {0x8C, 0x54, 0x45, 0x46, 0x20},  // 0x58 X                           
 {0x21, 0x08, 0x45, 0x46, 0x20},  // 0x59 Y                           
 {0xF8, 0x44, 0x44, 0x43, 0xE0},  // 0x5a Z                           
 {0x70, 0x84, 0x21, 0x09, 0xC0},  // 0x5b [                           
 {0x04, 0x10, 0x41, 0x04, 0x00},  // 0x5c (\)                         
 {0x72, 0x10, 0x84, 0x21, 0xC0},  // 0x5d ]                           
 {0x00, 0x00, 0x08, 0xA8, 0x80},  // 0x5e ^                           
 {0xF8, 0x00, 0x00, 0x00, 0x00},  // 0x5f _                           
 {0x00, 0x00, 0x04, 0x10, 0x40},  // 0x60 `                           
 {0xF4, 0x7D, 0x07, 0x00, 0x00},  // 0x61 a                           
 {0x7C, 0x63, 0x36, 0x84, 0x20},  // 0x62 b                           
 {0x70, 0x42, 0x17, 0x00, 0x00},  // 0x63 c                           
 {0xF4, 0x63, 0x9B, 0x42, 0x00},  // 0x64 d                           
 {0x70, 0x7F, 0x17, 0x00, 0x00},  // 0x65 e                           
 {0x10, 0x84, 0x71, 0x28, 0x80},  // 0x66 f                           
 {0x74, 0x3D, 0x18, 0xF8, 0x00},  // 0x67 g                           
 {0x8C, 0x63, 0x36, 0x84, 0x20},  // 0x68 h                           
 {0x71, 0x08, 0x43, 0x00, 0x80},  // 0x69 i                           
 {0x64, 0xA1, 0x00, 0x40, 0x00},  // 0x6a j                           
 {0x49, 0x46, 0x54, 0x84, 0x00},  // 0x6b k                           
 {0x21, 0x08, 0x42, 0x10, 0x80},  // 0x6c l                           
 {0x8C, 0x6B, 0x55, 0x00, 0x00},  // 0x6d m                           
 {0x8C, 0x63, 0x36, 0x80, 0x00},  // 0x6e n                           
 {0x74, 0x63, 0x17, 0x00, 0x00},  // 0x6f o                           
 {0x08, 0x5F, 0x18, 0xBC, 0x00},  // 0x70 p                           
 {0x84, 0x3D, 0x18, 0xF8, 0x00},  // 0x71 q                           
 {0x08, 0x42, 0x36, 0x80, 0x00},  // 0x72 r                           
 {0x7C, 0x1C, 0x17, 0x00, 0x00},  // 0x73 s                           
 {0x64, 0x84, 0x23, 0x88, 0x40},  // 0x74 t                           
 {0x74, 0x63, 0x18, 0x80, 0x00},  // 0x75 u                           
 {0x22, 0xA3, 0x18, 0x80, 0x00},  // 0x76 v                           
 {0x55, 0x6B, 0x18, 0x80, 0x00},  // 0x77 w                           
 {0x8A, 0x88, 0xA8, 0x80, 0x00},  // 0x78 x                           
 {0x21, 0x08, 0xA8, 0x80, 0x00},  // 0x79 y                           
 {0xF8, 0x88, 0x8F, 0x80, 0x00},  // 0x7a z                           
 {0x41, 0x08, 0x22, 0x11, 0x00},  // 0x7b {                           
 {0x01, 0x08, 0x42, 0x10, 0x00},  // 0x7c |                           
 {0x11, 0x08, 0x82, 0x10, 0x40},  // 0x7d }                           
 {0x00, 0x11, 0x51, 0x00, 0x00},  // 0x7e ~                           
 {0x00, 0x00, 0x00, 0x00, 0x00},  // 0x7f space                       
//0x80 ~ 8f
 {0xFE, 0xF7, 0xBD, 0xC7, 0xE0},  //	track = inverted T
 {0xDE, 0xF7, 0xBD, 0xEF, 0x60},  //	pause
 {0x19, 0xDF, 0xF7, 0x9C, 0x60},  // 	play
 {0x07, 0xFF, 0xFF, 0xFC, 0x00},  //	stop
 {0xFC, 0xFB, 0xDE, 0xCF, 0xE0},  //	chapter = inverted C
 {0xFD, 0x6B, 0x1A, 0xEF, 0xE0},  //	angle = inverted A
 {0xFC, 0x7B, 0xBB, 0xC7, 0xE0},  //	zoom = inverted Z
 {0xFC, 0xDA, 0x5E, 0xCF, 0xE0},  //	group = inverted G
 {0xFE, 0x7B, 0x52, 0xC7, 0xE0},  //	repeat = inverted Repeat
 {0xFC, 0x7B, 0xDE, 0xF7, 0xE0},  //	last = inverted L
 {0xFE, 0x63, 0x18, 0xE7, 0xE0},  //	Dolby D left
 {0xFC, 0xE3, 0x18, 0xCF, 0xE0},  //	Dolby D right
 {0xFD, 0x73, 0x1A, 0xC7, 0xE0},  //	remain = inverted R
 {0xFC, 0x7B, 0xBB, 0xC7, 0xE0},  //	zoom = inverted Z
 {0xfc, 0x77, 0xbd, 0xc7, 0xe0},  //	intro = inverted I
 {0xfe, 0x6f, 0xbe, 0xcf, 0xe0},  //	shuffle = inverted S
//0x90
 {0x00, 0x14, 0xE5, 0x00, 0x00},  //	irregular data (*)
 {0xff, 0xff, 0xff, 0xff, 0xe0},  //	all dot on
//0x92~0x94
 {0xff, 0x7b, 0x1e, 0xc7, 0xe0},  //	inverted F
 {0xfd, 0x6b, 0x58, 0xd7, 0xe0},  //	inverted M
 {0xc7, 0x3d, 0xff, 0x73, 0x00}}; //	inverted play (<)

// special character
#define SC_invert_T		0x80	//title
#define SC_CD_pause		0x81	//CD pause
#define SC_CD_play		0x82	//CD play
#define SC_CD_stop		0x83	//CD stop
#define SC_invert_C		0x84	//chapter
#define SC_invert_A		0x85	//angle
#define SC_invert_Z		0x86	//zoom
#define SC_invert_G		0x87	//group
#define SC_invert_RP	0x88	//repeat
#define SC_invert_L		0x89	//last
#define SC_invert_Dl	0x8a	//Dolby DD(left)
#define SC_invert_Dr	0x8b	//Dolby DD(right)
#define SC_invert_R		0x8c	//remain
#define SC_invert_Z1	0x8d	//zoom						//????
#define SC_invert_I		0x8e	//intro scan
#define SC_invert_S		0x8f	//shuffle, random

#define SC_irregular	0x90	//irregular character *
#define SC_allDotOn		0x91	//
#define SC_invert_F		0x92	//File
#define SC_invert_M		0x93	//Music
#define SC_invert_play	0x94	//invert PLAY(<)


#endif	//_CHARDEF_H_
