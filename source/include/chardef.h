/*****************************************************************************
******************************************************************************
**                                                                          **
**  Copyright (c) 2005 Videon Central, Inc.                                 **
**  All rights reserved.                                                    **
**                                                                          **
**  The computer program contained herein contains proprietary information  **
**  which is the property of Videon Central, Inc.  The program may be used  **
**  and/or copied only with the written permission of Videon Central, Inc.  **
**  or in accordance with the terms and conditions stipulated in the        **
**  agreement/contract under which the programs have been supplied.         **
**                                                                          **
******************************************************************************
*****************************************************************************/
/**
 * @file
 *    chardef.h
 *
 * Bitmap data file for the 5x7x20 display
 *
 *
 * @author
 *    Chuck Etzweiler
 *
 * @date 2005.06.30 - Created
 * @date 2005.10.06 - Modified letters 'J', 'q', and 'v'.
*/

// write the numbers in binary bottom-to-top and right-to-left.
// Each char takes 35 bits, but store in 5 bytes( 40 bits ),
// so pad each char bit map with 5 zeroes.
//
// x-y-z
// x = char position in the array.
// y = ASCII value, in decimal for that character.
// z = byte offset in the array for that character.
// example - the number zero( 16-48-80 )
//			 is the 16th character( zero based ) in array c_0.
//           it is ASCII value 48 decimal.
//           the starting byte( zero based offset ) for the bitmap is 80.
//
// There are special characters needed for this project that don' t have
// an ASCII equivalent. These are remapped to other ASCII characters.
// example - the inverted T is stored as ASCII character
//           '!' ( exclamation point ).
/****************************************************************************
	+---+---+---+---+---+		5x7 dot matrix
	| 42| 41| 40| 37| 36|
	+---+---+---+---+---+
	| 35| 34| 33| 32| 31|
	+---+---+---+---+---+
	| 30| 27| 26| 25| 24|
	+---+---+---+---+---+
	| 23| 22| 21| 20| 17|
	+---+---+---+---+---+
	| 16| 15| 14| 13| 12|
	+---+---+---+---+---+
	| 11| 10| 7 | 6 | 5 |
	+---+---+---+---+---+
	| 4 | 3 | 2 | 1 | 0 |
	+---+---+---+---+---+

	------------------------------------
	0xFE, 0xF7, 0xBD, 0xC7, 0xE0
	------------------------------------
	0xFE = 00 01 02 03 04 05 06 07(lsb)
	0xF7 = 10 11 12 13 14 15 16 17
	0xBD = 20 21 22 23 24 25 26 27
	0xC7 = 30 31 32 33 34 35 36 37
	0xE0 = 40 41 42 xx xx xx xx xx
	------------------------------------

	@@auther : An Kyung Chan
*****************************************************************************/
#ifndef _CHARDEF_H_
#define _CHARDEF_H_
// Only 255 elements allowed in an array, had to split into two.
BYTE const c_0[255] =
{
0x00, 0x00, 0x00, 0x00, 0x00,//		index   0- 32-  0 Blank space
0xFE, 0xF7, 0xBD, 0xC7, 0xE0,// 	index   1- 33-  5 track = inverted T (!)
0xDE, 0xF7, 0xBD, 0xEF, 0x60,// 	index   2- 34- 10 pause (")
0x19, 0xDF, 0xF7, 0x9C, 0x60,// 	index   3- 35- 15 play (#)
0x07, 0xFF, 0xFF, 0xFC, 0x00,// 	index   4- 36- 20 stop ($)
0xFC, 0xFB, 0xDE, 0xCF, 0xE0,// 	index   5- 37- 25 chapter = inverted C (%)
0xFD, 0x6B, 0x1A, 0xEF, 0xE0,// 	index   6- 38- 30 angle = inverted A (&)
0xFC, 0x7B, 0xBB, 0xC7, 0xE0,// 	index   7- 39- 35 zoom = inverted Z (')
0xFC, 0xDA, 0x5E, 0xCF, 0xE0,// 	index   8- 40- 40 group = inverted G (()
0xFE, 0x7B, 0x52, 0xC7, 0xE0,// 	index   9- 41- 45 repeat = inverted R ())
0xFC, 0x7B, 0xDE, 0xF7, 0xE0,// 	index  10- 42- 50 last = inverted L (*)
0xFE, 0x63, 0x18, 0xE7, 0xE0,// 	index  11- 43- 55 dolby digital left (+)
0xFC, 0xE3, 0x18, 0xCF, 0xE0,// 	index  12- 44- 60 dolby digital right (,)
0x00, 0x01, 0xF0, 0x00, 0x00,// -		index  13- 45- 65
0x20, 0x00, 0x00, 0x00, 0x00,// .	index  14- 46- 70
0x00, 0x44, 0x44, 0x40, 0x00,// /	index  15- 47- 75

0x74, 0x67, 0x5C, 0xC5, 0xC0,// 0	index  16- 48- 80
0x71, 0x08, 0x42, 0x18, 0x80,// 1	index  17- 49- 85
0xF8, 0x88, 0x88, 0x45, 0xC0,// 2	index  18- 50- 90
0x74, 0x60, 0x82, 0x23, 0xE0,// 3	index  19- 51- 95
0x42, 0x3E, 0x95, 0x31, 0x00,// 4	index  20- 52-100
0x74, 0x61, 0x07, 0x87, 0xE0,// 5	index  21- 53-105
0x74, 0x62, 0xF0, 0x89, 0x80,// 6	index  22- 54-110
0x10, 0x84, 0x44, 0x43, 0xE0,// 7	index  23- 55-115
0x74, 0x62, 0xE8, 0xC5, 0xC0,// 8	index  24- 56-120
0x32, 0x21, 0xE8, 0xC5, 0xC0,// 9	index  25- 57-125

0x01, 0x8C, 0x03, 0x18, 0x00,// :	index  25- 58-130
0x01, 0x8C, 0x03, 0x18, 0x00,// ;	index  26- 59-135 @todo this needs to be an inverted M for mute

#if 0 //2007-01-18
0x00, 0x00, 0x00, 0x00, 0x00,//	<   index  27- 60-140 unused
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  28- 61-145 unused
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  29- 62-150 unused
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  30- 63-155 unused
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  31- 64-160 unused
#else
0xFC, 0x7B, 0xBB, 0xC7, 0xE0,// <	index  27- 60-140 zoom = inverted Z (<)
0xfc, 0x77, 0xbd, 0xc7, 0xe0,// =	index  28- 61-145 intro = inverted I (=)
0xfe, 0x6f, 0xbe, 0xcf, 0xe0,//	>   index  29- 62-150 shuffle = inverted s (>)
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  30- 63-155 unused
0x00, 0x00, 0x00, 0x00, 0x00,//	    index  31- 64-160 unused
#endif

0x8C, 0x7F, 0x18, 0xC5, 0xC0,// A	index  32- 65-165
0x7C, 0x62, 0xF8, 0xC5, 0xF0,// B	index  33- 66-170
0x74, 0x42, 0x10, 0xC5, 0xC0,// C	index  34- 67-175
0x3A, 0x63, 0x18, 0xA4, 0xE0,// D	index  35- 68-180
0xF8, 0x42, 0xF0, 0x87, 0xE0,// E	index  36- 69-185
0x08, 0x42, 0xF0, 0x87, 0xE0,// F	index  37- 70-190
0x74, 0x63, 0x90, 0x85, 0xC0,// G	index  38- 71-195
0x8C, 0x63, 0xF8, 0xC6, 0x20,// H	index  39- 72-200
0x71, 0x08, 0x42, 0x11, 0xC0,// I	index  40- 73-205
0x11, 0x4A, 0x42, 0x13, 0xE0,// J	index  41- 74-210
0x8A, 0x4A, 0x32, 0xA6, 0x20,// K	index  42- 75-215
0xF8, 0x42, 0x10, 0x84, 0x20,// L	index  43- 76-220
0x8C, 0x63, 0x5A, 0xEE, 0x20,// M	index  44- 77-225
0x8C, 0x73, 0x59, 0xC6, 0x20,// N	index  45- 78-230
0x74, 0x63, 0x18, 0xC5, 0xC0,// O	index  46- 79-235
0x08, 0x42, 0xF8, 0xC5, 0xE0,// P	index  47- 80-240
0x83, 0xA3, 0x18, 0xC5, 0xC0,// Q	index  48- 81-245
0x8A, 0x4A, 0xF8, 0xC5, 0xE0 // R	index  49- 82-250
};

BYTE const c_1[210] =
{
0x7C, 0x20, 0xE0, 0x87, 0xC0,// S	index   0- 83-  0
0x21, 0x08, 0x42, 0x13, 0xE0,// T	index   1- 84-  5
0x74, 0x63, 0x18, 0xC6, 0x20,// U	index   2- 85- 10
0x22, 0xA3, 0x18, 0xC6, 0x20,// V	index   3- 86- 15
0x55, 0x6B, 0x58, 0xC6, 0x20,// W	index   4- 87- 20
0x8C, 0x54, 0x45, 0x46, 0x20,// X	index   5- 88- 25
0x21, 0x08, 0x45, 0x46, 0x20,// Y	index   6- 89- 30
0xF8, 0x44, 0x44, 0x43, 0xE0,// Z	index   7- 90- 35

0x00, 0x00, 0x00, 0x00, 0x00,//		index   8- 91- 40 unused
0x04, 0x10, 0x41, 0x04, 0x00,//	\	index   9- 92- 45
0x00, 0x00, 0x00, 0x00, 0x00,//		index  10- 93- 50 unused
0x00, 0x00, 0x00, 0x00, 0x00,//		index  11- 94- 55 unused
0x00, 0x00, 0x00, 0x00, 0x00,//		index  12- 95- 60 unused
0x00, 0x00, 0x00, 0x00, 0x00,//		index  13- 96- 65 unused


0xF4, 0x7D, 0x07, 0x00, 0x00,// a	index  14- 97- 70
0x7C, 0x63, 0x36, 0x84, 0x20,// b	index  15- 98- 75
0x70, 0x42, 0x17, 0x00, 0x00,// c	index  16- 99- 80
0xF4, 0x63, 0x9B, 0x42, 0x00,// d	index  17-100- 85
0x70, 0x7F, 0x17, 0x00, 0x00,// e	index  18-101- 90
0x10, 0x84, 0x71, 0x28, 0x80,// f	index  19-102- 95
0x74, 0x3D, 0x18, 0xF8, 0x00,// g	index  20-103-100
0x8C, 0x63, 0x36, 0x84, 0x20,// h	index  21-104-105
0x71, 0x08, 0x43, 0x00, 0x80,// i	index  22-105-110
0x64, 0xA1, 0x00, 0x40, 0x00,// j	index  23-106-115
0x49, 0x46, 0x54, 0x84, 0x00,// k	index  24-107-120
0x21, 0x08, 0x42, 0x10, 0x80,// l	index  25-108-125
0x8C, 0x6B, 0x55, 0x00, 0x00,// m	index  26-109-130
0x8C, 0x63, 0x36, 0x80, 0x00,// n	index  27-110-135
0x74, 0x63, 0x17, 0x00, 0x00,// o	index  28-111-140
0x08, 0x5F, 0x18, 0xBC, 0x00,// p	index  29-112-145
0x84, 0x3D, 0x18, 0xF8, 0x00,// q	index  30-113-150
0x08, 0x42, 0x36, 0x80, 0x00,// r	index  31-114-155
0x7C, 0x1C, 0x17, 0x00, 0x00,// s	index  32-115-160
0x64, 0x84, 0x23, 0x88, 0x40,// t	index  33-116-165
0x74, 0x63, 0x18, 0x80, 0x00,// u	index  34-117-170
0x22, 0xA3, 0x18, 0x80, 0x00,// v	index  35-118-175
0x55, 0x6B, 0x18, 0x80, 0x00,// w	index  36-119-180
0x8A, 0x88, 0xA8, 0x80, 0x00,// x	index  37-120-185
0x21, 0x08, 0xA8, 0x80, 0x00,// y	index  38-121-190
0xF8, 0x88, 0x8F, 0x80, 0x00,// z	index  39-122-195
0x00, 0x00, 0x00, 0x00, 0x00,//		index  40-123-200 unused
0x01, 0x08, 0x42, 0x10, 0x00,//	|	index  41-124-205
};

#endif	//_CHARDEF_H_
